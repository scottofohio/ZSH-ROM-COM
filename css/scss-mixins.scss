/**
 * Modified Bootstrap Grid Mixin
 *
 * Utilizes CSS Grid with a flexbox fallback. 
 */

$grid-gutter-width: 30px; 
@mixin make-container($container_size: full, $no_padding: false) {
  width: 100%;
  margin-right: auto;
  margin-left: auto; 
  padding-left: $grid-gutter-width;
  padding-right: $grid-gutter-width;
  @include media-breakpoint-up(md) {
    padding-left: $grid-gutter-width;
    padding-right: $grid-gutter-width;
  }
  @include media-breakpoint-up(lg) {
    padding-left: 6vw;
    padding-right: 6vw;
  }
}

@mixin make-row($gridcount: $grid-columns, $usecontainerinrow: true, $gutter: $grid-gutter-width) {
 
  display: -ms-flexbox;
  display: flex;
  
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  @if $usecontainerinrow == false {
    margin-left: -$gutter / 2;
    margin-right: -$gutter / 2;
  }

  @supports(display: grid) {
    display: grid;
    grid-template-columns: repeat($gridcount, 1fr);
    grid-gap: $gutter;
   
    @if $usecontainerinrow == false {
      margin-left: 0;
      margin-right: 0;
    }
  }
}

@mixin make-col-ready($gutter: $grid-gutter-width) { 
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  padding-right: $gutter / 2;
  padding-left: $gutter / 2;

  @supports(display: grid) {
    padding-left: 0;
    padding-right: 0;
  }

  
}

@mixin make-col($gridcol, $size, $gridsize: 0, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  -ms-flex: 0 0 percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
  @if $gridsize > 0 {
    @supports(display: grid) {
      max-width: 100%;
      flex: none;
      grid-column: $gridcol / span $gridsize;
    }
  }

}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}

/**
 * Prefixer Mixin 
 *
 *  Mixin to add all required browser prefixes
*/

 @mixin prefix($property, $value, $prefixes: null, $important: false) {
  @if $prefixes == null {
      @if variable-exists(browser-prefixes) {
          $prefixes: $browser-prefixes;
      } @else {
          $prefixes: "webkit","moz","ms","o";
      }
  }
  @if $important == true {
      $value: unquote($value) !important;
  }
  @each $prefix in $prefixes {
      #{"-" + $prefix + "-" + $property}: unquote($value);
  }
  #{$property}:  unquote($value);
}

/**
* Alias for `@mixin prefix`'
*/
@mixin prefixer($property, $value, $prefixes: null, $important: false) {
  @include prefix($property, $value, $prefixes, $important);
}
